AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Serverless API with AWS Lambda, API Gateway, and DynamoDB

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - test
      - prod
    Description: Environment name

Globals:
  Function:
    Timeout: 10
    MemorySize: 256
    Runtime: nodejs14.x
    Tracing: Active
    Environment:
      Variables:
        TABLE_NAME: !Ref ItemsTable
        ENVIRONMENT: !Ref Environment

Resources:
  # API Gateway
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Environment
      TracingEnabled: true
      MethodSettings:
        - ResourcePath: "/*"
          HttpMethod: "*"
          ThrottlingBurstLimit: 100
          ThrottlingRateLimit: 50
      AccessLogSetting:
        DestinationArn: !GetAtt ApiGatewayAccessLogGroup.Arn
        Format: '{"requestId":"$context.requestId", "ip":"$context.identity.sourceIp", "requestTime":"$context.requestTime", "httpMethod":"$context.httpMethod", "path":"$context.path", "status":"$context.status", "responseLatency":"$context.responseLatency"}'

  ApiGatewayAccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/apigateway/${Environment}-serverless-api"
      RetentionInDays: 30

  # DynamoDB Table
  ItemsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${Environment}-items"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

  # Lambda Functions
  CreateItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/functions/create-item/
      Handler: index.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ItemsTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /items
            Method: post

  GetItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/functions/get-item/
      Handler: index.handler
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref ItemsTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /items/{id}
            Method: get

  ListItemsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/functions/list-items/
      Handler: index.handler
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref ItemsTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /items
            Method: get

  DeleteItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/functions/delete-item/
      Handler: index.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ItemsTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /items/{id}
            Method: delete

  # Lambda Layer for shared code
  CommonLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub "${Environment}-common-layer"
      Description: Common utilities for Lambda functions
      ContentUri: src/layers/common/
      CompatibleRuntimes:
        - nodejs14.x
      RetentionPolicy: Retain

  # CloudWatch Dashboard
  Dashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub "${Environment}-serverless-api-dashboard"
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/ApiGateway", "Count", "ApiName", "${ApiGateway}", { "stat": "Sum", "period": 300 } ],
                  [ ".", "4XXError", ".", ".", { "stat": "Sum", "period": 300 } ],
                  [ ".", "5XXError", ".", ".", { "stat": "Sum", "period": 300 } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "API Gateway Requests"
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/Lambda", "Invocations", "FunctionName", "${CreateItemFunction}", { "stat": "Sum", "period": 300 } ],
                  [ ".", ".", ".", "${GetItemFunction}", { "stat": "Sum", "period": 300 } ],
                  [ ".", ".", ".", "${ListItemsFunction}", { "stat": "Sum", "period": 300 } ],
                  [ ".", ".", ".", "${DeleteItemFunction}", { "stat": "Sum", "period": 300 } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "Lambda Invocations"
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 6,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/Lambda", "Duration", "FunctionName", "${CreateItemFunction}", { "stat": "Average", "period": 300 } ],
                  [ ".", ".", ".", "${GetItemFunction}", { "stat": "Average", "period": 300 } ],
                  [ ".", ".", ".", "${ListItemsFunction}", { "stat": "Average", "period": 300 } ],
                  [ ".", ".", ".", "${DeleteItemFunction}", { "stat": "Average", "period": 300 } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "Lambda Duration"
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 6,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/Lambda", "Errors", "FunctionName", "${CreateItemFunction}", { "stat": "Sum", "period": 300 } ],
                  [ ".", ".", ".", "${GetItemFunction}", { "stat": "Sum", "period": 300 } ],
                  [ ".", ".", ".", "${ListItemsFunction}", { "stat": "Sum", "period": 300 } ],
                  [ ".", ".", ".", "${DeleteItemFunction}", { "stat": "Sum", "period": 300 } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "Lambda Errors"
              }
            }
          ]
        }

Outputs:
  ApiEndpoint:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/"
  
  ItemsTable:
    Description: "DynamoDB table for items"
    Value: !Ref ItemsTable